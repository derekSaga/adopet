"""city state specie models

Revision ID: 0cc3c0c325c5
Revises: 
Create Date: 2023-04-19 15:26:22.546316

"""
import sqlalchemy as sa
from alembic import op
from api.enums.animal_species import AnimalSpecieEnum
from api.enums.state_enum import StateEnum
from api.models.animal_specie_model import AnimalSpecieModel
from api.models.state_model import StateModel

# revision identifiers, used by Alembic.
revision = "0cc3c0c325c5"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state",
        sa.Column(
            "name",
            sa.Enum(
                "Rondônia",
                "Acre",
                "Amazonas",
                "Roraima",
                "Pará",
                "Amapá",
                "Tocantins",
                "Maranhão",
                "Piauí",
                "Ceará",
                "Rio Grande do Norte",
                "Paraíba",
                "Pernambuco",
                "Alagoas",
                "Sergipe",
                "Bahia",
                "Minas Gerais",
                "Espírito Santo",
                "Rio de Janeiro",
                "São Paulo",
                "Paraná",
                "Santa Catarina",
                "Rio Grande do Sul",
                "Mato Grosso do Sul",
                "Mato Grosso",
                "Goiás",
                "Distrito Federal",
                name="stateenum",
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "city",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("state_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["state_id"],
            ["state.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "animal_specie",
        sa.Column(
            "name", sa.Enum("DOG", "CAT", name="animalspecieenum"), nullable=False
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###
    # for value in StateEnum:
    #     op.execute(
    #         sa.insert(StateModel).values()
    #     )
    op.bulk_insert(StateModel.__table__, [{"name": value.value} for value in StateEnum])

    op.bulk_insert(
        AnimalSpecieModel.__table__,
        [{"name": value.value} for value in AnimalSpecieEnum],
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("animal_specie")
    op.drop_table("city")
    op.drop_table("state")
    # ### end Alembic commands ###
